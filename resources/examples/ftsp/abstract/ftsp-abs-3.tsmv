@TIME_DOMAIN continuous
MODULE stableproc(id, wake_up, receiving, msg_root, msg_seqn, normalize)
VAR
	state : {idle, broadcasting};


	-- hb : 0..8;
	myseq : 0..10;
INIT
	-- 0 <= hb & hb <= 4 &
	0 <= myseq & myseq <= 2
ASSIGN
	init(state) := idle;
	next(state) := case
		wake_up & state=idle : broadcasting;
		state=broadcasting : idle;
        TRUE : idle;
	esac;
	-- next(hb) := case
	--	wake_up & hb < 8 : hb + 1;
	--	receiving & !ignoreMsg & msg_root < id : 0;
	--	TRUE : hb;
	--esac;
	next(myseq) := case
		state = broadcasting & 1 = id & myseq < 8 : myseq + 1;
		receiving & !ignoreMsg : msg_seqn;
		normalize & (myseq >= 1) : myseq - 1; -- Normalization
		TRUE : myseq;
	esac;
DEFINE
	ignoreMsg := (msg_root > 1
					| 1 = id -- & hb < 3
					| msg_root = 1 & msg_seqn <= myseq);
					
MODULE lastproc(id, wake_up, receiving, msg_root, msg_seqn, normalize)
VAR
	state : {idle, broadcasting};


	hb : 0..8;
	myroot : 1..4;
	numentries : 0..4;
	myseq : 0..10;
ASSIGN
	next(state) := case
		wake_up & state=idle & (next(myroot) = id | myroot = id | numentries >= 4) : broadcasting;
		state=broadcasting : idle;
        TRUE : idle;
	esac;
	next(hb) := case
		wake_up & hb < 8 : hb + 1;
		receiving & !ignoreMsg & msg_root < id : 0;
		TRUE : hb;
	esac;
	next(myroot) := case
		wake_up & myroot != id & hb >= 8 : id;
		receiving & msg_root < myroot : msg_root;
		TRUE : myroot;
	esac;
	next(numentries) := case
		receiving & !ignoreMsg & numentries < 4 : numentries + 1;
		TRUE : numentries;
	esac;
	next(myseq) := case
		state = broadcasting & myroot = id & myseq < 8 : myseq + 1;
		receiving & !ignoreMsg : msg_seqn;
		normalize & (myseq >= 1) : myseq - 1; -- Normalization
		TRUE : myseq;
	esac;
DEFINE
	ignoreMsg := (msg_root > myroot 
					| myroot = id & hb < 3
					| msg_root = myroot & msg_seqn <= myseq);
					

MODULE Others
IVAR
    msg_root : 2..4; -- Others can only send messages not coming from root.
    msg_seq : 0..10; -- with arbitrary seq numbers


MODULE main
IVAR
    others_sending_to_1 : boolean;
    others_sending_to_2 : boolean;
    others_sending_to_3 : boolean;

VAR
    cmd : {idle, decrement_seqn, others, wake1, wake2, wake3};
	 counter : 0..20;
proc1 : stableproc(1, _rt_wakeup1, receiving1, msg_root, msg_seqn, cmd = decrement_seqn);
proc2 : stableproc(2, _rt_wakeup2, receiving2, msg_root, msg_seqn, cmd = decrement_seqn);
proc3 : lastproc(3, _rt_wakeup3, receiving3, msg_root, msg_seqn, cmd = decrement_seqn);
oth : Others;
x1 : clock;
x2 : clock;
x3 : clock;
ASSIGN
    init(counter) := 0;
    next(counter) := case
        cmd = wake1 & counter < 20 : counter + 1;
        TRUE : counter;
    esac;
	init(x1) := 0;
    	next(x1) := case
        cmd = wake1 : 0;
        TRUE : x1;
    	esac;
	init(x2) := 0;
    	next(x2) := case
        cmd = wake2 : 0;
        TRUE : x2;
    	esac;
	init(x3) := 0;
    	next(x3) := case
        cmd = wake3 : 0;
        TRUE : x3;
    	esac;
INVAR
	(someone_broadcasting -> cmd = idle)
	& (!someone_broadcasting & (cmd != others) &  proc1.myseq >= 1 & proc2.myseq >= 1 & proc3.myseq >= 1 -> cmd = decrement_seqn)
	& (cmd = decrement_seqn -> proc1.myseq >= 1 & proc2.myseq >= 1 & proc3.myseq >= 1)
    & (cmd = wake1 -> x1 >= 9)
    & (cmd = wake2 -> x2 >= 9)
    & (cmd = wake3 -> x3 >= 9)
& (TRUE -> x1 <= 11 & x2 <= 11 & x3 <= 11)
DEFINE
	err := counter = 20 & (proc3.myroot != 1);
	_rt_wakeup1 := x1 >= 9 & cmd = wake1;
	_rt_wakeup2 := x2 >= 9 & cmd = wake2;
	_rt_wakeup3 := x3 >= 9 & cmd = wake3;
	receiving1 := proc2.state = broadcasting | (cmd = others & others_sending_to_1);
	receiving2 := proc3.state = broadcasting | proc1.state = broadcasting | (cmd = others & others_sending_to_2);
	receiving3 := proc2.state = broadcasting | (cmd = others & others_sending_to_3);
	msg_root := case
        proc1.state = broadcasting : 1;
        proc2.state = broadcasting : 1;
        proc3.state = broadcasting : proc3.myroot;
    cmd = others : oth.msg_root;
    TRUE : 3;
	esac;
    msg_seqn := case
        proc1.state = broadcasting : proc1.myseq;
        proc2.state = broadcasting : proc2.myseq;
        proc3.state = broadcasting : proc3.myseq;
        cmd = others : oth.msg_seq;
        TRUE : 10;
    esac;
    someone_broadcasting := proc1.state = broadcasting | proc2.state = broadcasting | proc3.state = broadcasting;
INVARSPEC !err

