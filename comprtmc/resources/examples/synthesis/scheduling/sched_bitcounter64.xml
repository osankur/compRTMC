<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>clock a;
clock b;
clock t;


bool startA, startB, tick;
bool controllable_sched0;
bool controllable_sched1;
bool error;

int[0,2] m0_occupied, m1_occupied;
int[0,2] m0_counter, m1_counter;

int counter0 = 0;
int counter1 = 0;

bool pout0;
bool pout1;

void update(){
	pout0 = counter0 % 2;
	pout1 = (counter1 &amp; 2)&gt;&gt;1;
	if (controllable_sched0 &amp;&amp; m0_occupied &gt;0 || controllable_sched1 &amp;&amp; m1_occupied&gt;0)
	{
		error = 1;
	}
	if ((startB || startA) &amp;&amp; !controllable_sched0 &amp;&amp; !controllable_sched1){
		error = 1;
	}

	if (startA){
		if(controllable_sched0){
			m0_occupied = 1;
			m0_counter =0;
		}
		else if(controllable_sched1){
			m1_occupied = 1;
			m1_counter =0;
		}
	}
	if (startB){
		if(controllable_sched0){
			m0_occupied = 2;
			m0_counter =0;
		}
		else if(controllable_sched1){
			m1_occupied = 2;
			m1_counter =0;
		}
	}
	if(tick){
		// if(m0_occupied&gt;0){up0=1;}
		// if(m1_occupied&gt;0){up1=1;}
		if (m0_occupied &gt; 0 &amp;&amp; (pout0 &amp;&amp; m0_counter &lt; 1 || !pout0 &amp;&amp; m0_counter &lt; 2)){
                    m0_counter = m0_counter + 1;			
		}
                else if (m0_occupied &gt; 0 &amp;&amp; (pout0 &amp;&amp; m0_counter &gt;= 1 || !pout0 &amp;&amp; m0_counter &gt;=  2)) {
	            // finished
                    m0_counter = 0;
                    m0_occupied = 0;
		    counter0 = (counter0 + 1) % 64;
                }
                if (m1_occupied &gt; 0 &amp;&amp; (pout1 &amp;&amp; m1_counter &lt; 1 || !pout1 &amp;&amp; m1_counter &lt; 2)) {
	            // not yet finished
                    m1_counter = m1_counter + 1;
                } else if (m1_occupied &gt; 0 &amp;&amp; (pout1 &amp;&amp; m1_counter &gt;= 1 || !pout1 &amp;&amp; m1_counter &gt;= 2)) {
        	    // finished
                    m1_counter = 0;
                    m1_occupied = 0;
		    counter1 = (counter1 + 1) % 64;
                }
	}
}
</declaration><template><name x="5" y="5">Template</name><declaration>// Place local declarations here.
</declaration><location id="id0" x="-160" y="-48"><label kind="invariant" x="-170" y="-33">t&lt;=5 &amp;&amp; a &lt;= 20 &amp;&amp; b &lt;= 20</label></location><location id="id1" x="0" y="96"><urgent/></location><location id="id2" x="120" y="96"><urgent/></location><location id="id3" x="264" y="104"><urgent/></location><location id="id4" x="400" y="104"><urgent/></location><location id="id5" x="584" y="120"><urgent/></location><location id="id6" x="720" y="112"><urgent/></location><location id="id7" x="104" y="-48"><urgent/></location><init ref="id7"/><transition action=""><source ref="id1"/><target ref="id0"/><label kind="assignment" x="-140" y="24">update()</label><nail x="-272" y="104"/><nail x="-280" y="-48"/></transition><transition><source ref="id7"/><target ref="id6"/><nail x="712" y="-40"/></transition><transition controllable="false" action="update()"><source ref="id0"/><target ref="id7"/></transition><transition action=""><source ref="id2"/><target ref="id1"/><label kind="assignment" x="0" y="96">controllable_sched1=1</label><nail x="24" y="136"/></transition><transition action=""><source ref="id2"/><target ref="id1"/><label kind="assignment" x="0" y="96">controllable_sched1=0</label><nail x="40" y="48"/></transition><transition action=""><source ref="id3"/><target ref="id2"/><label kind="assignment" x="128" y="112">controllable_sched0=1</label><nail x="168" y="136"/></transition><transition action=""><source ref="id3"/><target ref="id2"/><label kind="assignment" x="136" y="32">controllable_sched0=0</label><nail x="160" y="48"/></transition><transition controllable="false" action=""><source ref="id4"/><target ref="id3"/><label kind="guard" x="232" y="184">!startA &amp;&amp; !startB &amp;&amp; t&lt;=5</label><label kind="assignment" x="272" y="168">tick=1, t=0</label><nail x="312" y="160"/></transition><transition controllable="false" action=""><source ref="id4"/><target ref="id3"/><label kind="assignment" x="304" y="56">tick=0</label><nail x="320" y="72"/></transition><transition controllable="false" action=""><source ref="id5"/><target ref="id4"/><label kind="guard" x="432" y="82">!startA &amp;&amp; b==20</label><label kind="assignment" x="424" y="120">startB=1,b=0</label><nail x="456" y="160"/></transition><transition controllable="false" action=""><source ref="id5"/><target ref="id4"/><label kind="assignment" x="432" y="96">startB=0</label><nail x="464" y="64"/></transition><transition controllable="false" action=""><source ref="id6"/><target ref="id5"/><label kind="guard" x="616" y="134">a==20</label><label kind="assignment" x="616" y="152">startA=1,a=0</label><nail x="672" y="208"/></transition><transition controllable="false" action=""><source ref="id6"/><target ref="id5"/><label kind="assignment" x="608" y="56">startA=0</label><nail x="616" y="80"/></transition></template><system>// Place template instantiations here.
Process = Template();

// List one or more processes to be composed into a system.
system Process;</system></nta>