@TIME_DOMAIN continuous

MODULE sched(_rt_ready0, is_ready0, _rt_ready1, is_ready1,_rt_ready2, is_ready2)
VAR
    y0 : clock;
    y1 : clock;
    y2 : clock;
    x : clock;
    state : {wait, p0, p1, p2, idle, sink};
ASSIGN
    init(x) := 0;
    init(y0) := 0;
    init(y1) := 0;
    init(y2) := 0;
    init(state) := wait;
    next(state) := case
        (is_ready0 & y0 > 20) | (is_ready1 & y1 > 20) | (is_ready1 & y1 > 40): sink; -- deadlines
        state = wait & is_ready0 : p0;
        state = wait & !is_ready0 & is_ready1 : p1;
        state = wait & !is_ready0 & !is_ready1 & is_ready2 : p2;
        state = wait & !is_ready0 & !is_ready1 & !is_ready2: idle;
        state = p0 & x >= 2 & x <= 5 : {p0, wait}; -- computation time p0
        state = p1 & x >= 1 & x <= 4 : {p1, wait}; -- computation time p1
        state = p2 & x >= 2 & x <= 6 : {p2, wait}; -- computation time p1
        state = idle & x <= 5 : {idle, wait}; -- computation time idle
    esac;
    next(y0) := case
        _rt_ready0 : 0;
        TRUE : y0;
    esac;
    next(y1) := case
        _rt_ready1 : 0;
        TRUE : y1;
    esac;
    next(y2) := case
        _rt_ready2 : 0;
        TRUE : y2;
    esac;
    next(x) := case
        state = wait : 0;
        TRUE : x;
    esac;
INVAR
      (state = p0 -> x <= 5) -- computation upper bound p0
    & (state = p1 -> x <= 4) -- computation upper bound p1
    & (state = p2 -> x <= 6) -- computation upper bound p2
    & (state=idle -> x <= 5) -- computation upper bound idle
URGENT
    state = wait
DEFINE
    sched0 := state = p0;
    sched1 := state = p1;
    sched2 := state = p2;
    interTimeElapsed0 := y0 >= 20; -- interarrival time p0
    interTimeElapsed1 := y1 >= 20; -- interarrival time p1
    interTimeElapsed2 := y2 >= 25; -- interarrival time p1

MODULE main
VAR
--inputs
cmd : {check_ready0, check_ready1, check_ready2, cmd_sched, cmd_release, cmd_miss};
is_ready0 : boolean;
is_ready1 : boolean;
is_ready2 : boolean;
err : boolean;
nondet : boolean;

sched : sched(_rt_ready0, is_ready0, _rt_ready1, is_ready1,_rt_ready2, is_ready2);

obsx_0_0_6 : boolean;
obsx_1 : boolean;
obsx_2 : boolean;
obsy_0_0_6 : boolean;
obsy_1 : boolean;
obsy_2 : boolean;
robx_0_0_7 : boolean;
robx_1 : boolean;
robx_2 : boolean;
roby_0_0_7 : boolean;
roby_1 : boolean;
roby_2 : boolean;
glitches_0_0_1 : boolean;
controllable_movx_0_0_2 : boolean;
controllable_movx_1 : boolean;
controllable_movy_0_0_2 : boolean;
controllable_movy_1 : boolean;
controllable_obsmove : boolean;
--latches
IsNotFirstRound : boolean;
prev_obsx_0_0_6 : boolean;
prev_obsx_1 : boolean;
prev_obsx_2 : boolean;
prev_obsy_0_0_6 : boolean;
prev_obsy_1 : boolean;
prev_obsy_2 : boolean;
prev_robx_0_0_7 : boolean;
prev_robx_1 : boolean;
prev_robx_2 : boolean;
prev_roby_0_0_7 : boolean;
prev_roby_1 : boolean;
prev_roby_2 : boolean;
prev_glitches_0_0_1 : boolean;
prev_movx_0_0_2 : boolean;
prev_movx_1 : boolean;
prev_movy_0_0_2 : boolean;
prev_movy_1 : boolean;
prev_obsmove : boolean;
AssumptionsAlreadyViolated : boolean;

ASSIGN
init(cmd) := cmd_sched;
next(cmd) := case
    cmd = check_ready0 : check_ready1;
    cmd = check_ready1 : check_ready2;
    cmd = check_ready2 : cmd_sched;
    cmd = cmd_sched : cmd_release;
    cmd = cmd_release : cmd_miss;
    cmd = cmd_miss : check_ready0;
esac;
init(is_ready0) := TRUE;
next(is_ready0) := case 
    sched.sched0 : FALSE;
    _rt_ready0 & sched.interTimeElapsed0 : TRUE;
    TRUE : is_ready0;
esac;
init(is_ready1) := TRUE;
next(is_ready1) := case 
    sched.sched1 : FALSE;
    _rt_ready1 & sched.interTimeElapsed1 : TRUE;
    TRUE : is_ready1;
esac;
init(is_ready2) := TRUE;
next(is_ready2) := case 
    sched.sched2 : FALSE;
    _rt_ready2 & sched.interTimeElapsed2 : TRUE;
    TRUE : is_ready2;
esac;
init(err) := FALSE;
next(err) := err | _rt_miss;


init(IsNotFirstRound) := FALSE;
next(IsNotFirstRound) := TRUE;
init(prev_obsx_0_0_6) := FALSE;
next(prev_obsx_0_0_6) := obsx_0_0_6;
init(prev_obsx_1) := FALSE;
next(prev_obsx_1) := obsx_1;
init(prev_obsx_2) := FALSE;
next(prev_obsx_2) := obsx_2;
init(prev_obsy_0_0_6) := FALSE;
next(prev_obsy_0_0_6) := obsy_0_0_6;
init(prev_obsy_1) := FALSE;
next(prev_obsy_1) := obsy_1;
init(prev_obsy_2) := FALSE;
next(prev_obsy_2) := obsy_2;
init(prev_robx_0_0_7) := FALSE;
next(prev_robx_0_0_7) := robx_0_0_7;
init(prev_robx_1) := FALSE;
next(prev_robx_1) := robx_1;
init(prev_robx_2) := FALSE;
next(prev_robx_2) := robx_2;
init(prev_roby_0_0_7) := FALSE;
next(prev_roby_0_0_7) := roby_0_0_7;
init(prev_roby_1) := FALSE;
next(prev_roby_1) := roby_1;
init(prev_roby_2) := FALSE;
next(prev_roby_2) := roby_2;
init(prev_glitches_0_0_1) := FALSE;
next(prev_glitches_0_0_1) := glitches_0_0_1;
init(prev_movx_0_0_2) := FALSE;
next(prev_movx_0_0_2) := controllable_movx_0_0_2;
init(prev_movx_1) := FALSE;
next(prev_movx_1) := controllable_movx_1;
init(prev_movy_0_0_2) := FALSE;
next(prev_movy_0_0_2) := controllable_movy_0_0_2;
init(prev_movy_1) := FALSE;
next(prev_movy_1) := controllable_movy_1;
init(prev_obsmove) := FALSE;
next(prev_obsmove) := controllable_obsmove;
init(AssumptionsAlreadyViolated) := FALSE;
next(AssumptionsAlreadyViolated) := !a586;
DEFINE
--ands
a78 := obsy_1 & obsy_0_0_6;
a80 := a78 & obsy_2;
a82 := !robx_1 & !robx_0_0_7;
a84 := a82 & !robx_2;
a86 := !roby_1 & !roby_0_0_7;
a88 := a86 & !roby_2;
a90 := a88 & a84;
a92 := obsx_1 & !obsx_0_0_6;
a94 := a92 & obsx_2;
a96 := a94 & a90;
a98 := obsy_1 & !obsy_0_0_6;
a100 := a98 & obsy_2;
a102 := a100 & a96;
a104 := a102 & !glitches_0_0_1;
a106 := obsx_1 & obsx_0_0_6;
a108 := a106 & obsx_2;
a110 := !a108 & a104;
a112 := !a110 & !IsNotFirstRound;
a114 := !a112 & !a80;
a116 := prev_obsx_1 & prev_obsx_0_0_6;
a118 := !a116 & !prev_obsx_2;
a120 := prev_obsx_1 & obsx_1;
a122 := prev_obsx_0_0_6 & !obsx_0_0_6;
a124 := a122 & !a120;
a126 := !prev_obsx_1 & !obsx_1;
a128 := prev_obsx_1 & !prev_obsx_0_0_6;
a130 := !a128 & !a126;
a132 := a130 & !a124;
a134 := a132 & obsx_2;
a136 := !a134 & !a118;
a138 := a116 & prev_obsx_2;
a140 := !a132 & !obsx_2;
a142 := !a140 & !a138;
a144 := a142 & !a136;
a146 := prev_obsy_1 & prev_obsy_0_0_6;
a148 := !a146 & !prev_obsy_2;
a150 := prev_obsy_1 & obsy_1;
a152 := prev_obsy_0_0_6 & !obsy_0_0_6;
a154 := a152 & !a150;
a156 := !prev_obsy_1 & !obsy_1;
a158 := prev_obsy_1 & !prev_obsy_0_0_6;
a160 := !a158 & !a156;
a162 := a160 & !a154;
a164 := a162 & obsy_2;
a166 := !a164 & !a148;
a168 := a146 & prev_obsy_2;
a170 := !a162 & !obsy_2;
a172 := !a170 & !a168;
a174 := a172 & !a166;
a176 := !a174 & !a144;
a178 := !a106 & !obsx_2;
a180 := !prev_obsx_0_0_6 & obsx_0_0_6;
a182 := a180 & !a120;
a184 := !a126 & !a92;
a186 := a184 & !a182;
a188 := a186 & prev_obsx_2;
a190 := !a188 & !a178;
a192 := !a186 & !prev_obsx_2;
a194 := !a192 & !a108;
a196 := a194 & !a190;
a198 := !a196 & a176;
a200 := !a78 & !obsy_2;
a202 := !prev_obsy_0_0_6 & obsy_0_0_6;
a204 := a202 & !a150;
a206 := !a156 & !a98;
a208 := a206 & !a204;
a210 := a208 & prev_obsy_2;
a212 := !a210 & !a200;
a214 := !a208 & !prev_obsy_2;
a216 := !a214 & !a80;
a218 := a216 & !a212;
a220 := !a218 & a198;
a222 := prev_robx_1 & prev_robx_0_0_7;
a224 := !a222 & !prev_robx_2;
a226 := !prev_robx_1 & !prev_robx_0_0_7;
a228 := !a226 & !a222;
a230 := a228 & !robx_1;
a232 := !a228 & robx_1;
a234 := !prev_robx_0_0_7 & !robx_0_0_7;
a236 := prev_robx_0_0_7 & robx_0_0_7;
a238 := a236 & !a234;
a240 := !a238 & !a232;
a242 := !a240 & !a230;
a244 := a242 & robx_2;
a246 := !a244 & !a224;
a248 := a222 & prev_robx_2;
a250 := !a242 & !robx_2;
a252 := !a250 & !a248;
a254 := a252 & !a246;
a256 := !a254 & a220;
a258 := prev_roby_1 & prev_roby_0_0_7;
a260 := !a258 & !prev_roby_2;
a262 := !prev_roby_1 & !prev_roby_0_0_7;
a264 := !a262 & !a258;
a266 := a264 & !roby_1;
a268 := !a264 & roby_1;
a270 := !prev_roby_0_0_7 & !roby_0_0_7;
a272 := prev_roby_0_0_7 & roby_0_0_7;
a274 := a272 & !a270;
a276 := !a274 & !a268;
a278 := !a276 & !a266;
a280 := a278 & roby_2;
a282 := !a280 & !a260;
a284 := a258 & prev_roby_2;
a286 := !a278 & !roby_2;
a288 := !a286 & !a284;
a290 := a288 & !a282;
a292 := !a290 & a256;
a294 := robx_1 & robx_0_0_7;
a296 := a294 & robx_2;
a298 := !a294 & !robx_2;
a300 := !a298 & !a296;
a302 := a300 & !prev_robx_2;
a304 := !a300 & prev_robx_2;
a306 := !a294 & !a82;
a308 := a306 & !prev_robx_1;
a310 := !a306 & prev_robx_1;
a312 := !a310 & !a238;
a314 := !a312 & !a308;
a316 := !a314 & !a304;
a318 := !a316 & !a302;
a320 := a318 & !a296;
a322 := !a320 & a292;
a324 := roby_1 & roby_0_0_7;
a326 := a324 & roby_2;
a328 := !a324 & !roby_2;
a330 := !a328 & !a326;
a332 := a330 & !prev_roby_2;
a334 := !a330 & prev_roby_2;
a336 := !a324 & !a86;
a338 := a336 & !prev_roby_1;
a340 := !a336 & prev_roby_1;
a342 := !a340 & !a274;
a344 := !a342 & !a338;
a346 := !a344 & !a334;
a348 := !a346 & !a332;
a350 := a348 & !a326;
a352 := !a350 & a322;
a354 := a226 & !prev_robx_2;
a356 := a354 & a84;
a358 := a356 & !prev_movx_1;
a360 := !prev_movx_1 & !prev_robx_1;
a362 := prev_movx_1 & prev_robx_1;
a364 := prev_movx_0_0_2 & prev_robx_0_0_7;
a366 := !a364 & !a362;
a368 := !a366 & !a360;
a370 := a368 & prev_robx_2;
a372 := a370 & !a296;
a374 := !a370 & a296;
a376 := !a368 & !prev_robx_2;
a378 := !a376 & !a370;
a380 := a378 & !a300;
a382 := !a378 & a300;
a384 := !a362 & !a360;
a386 := !a384 & !a364;
a388 := a384 & a364;
a390 := !a388 & !a386;
a392 := a390 & !a306;
a394 := !a390 & a306;
a396 := !prev_movx_0_0_2 & !prev_robx_0_0_7;
a398 := !a396 & !a364;
a400 := !a398 & !robx_0_0_7;
a402 := !a400 & !a394;
a404 := !a402 & !a392;
a406 := !a404 & !a382;
a408 := !a406 & !a380;
a410 := !a408 & !a374;
a412 := !a410 & !a372;
a414 := a412 & !a358;
a416 := a296 & a248;
a418 := !prev_movx_1 & !prev_movx_0_0_2;
a420 := !a418 & a416;
a422 := a398 & robx_0_0_7;
a424 := !a422 & !a392;
a426 := !a424 & !a394;
a428 := !a426 & !a380;
a430 := !a428 & !a382;
a432 := !a430 & !a372;
a434 := !a432 & !a374;
a436 := a434 & !a420;
a438 := !a436 & !a414;
a440 := a262 & !prev_roby_2;
a442 := a440 & a88;
a444 := a442 & !prev_movy_1;
a446 := !prev_movy_1 & !prev_roby_1;
a448 := prev_movy_1 & prev_roby_1;
a450 := prev_movy_0_0_2 & prev_roby_0_0_7;
a452 := !a450 & !a448;
a454 := !a452 & !a446;
a456 := a454 & prev_roby_2;
a458 := a456 & !a326;
a460 := !a456 & a326;
a462 := !a454 & !prev_roby_2;
a464 := !a462 & !a456;
a466 := a464 & !a330;
a468 := !a464 & a330;
a470 := !a448 & !a446;
a472 := !a470 & !a450;
a474 := a470 & a450;
a476 := !a474 & !a472;
a478 := a476 & !a336;
a480 := !a476 & a336;
a482 := !prev_movy_0_0_2 & !prev_roby_0_0_7;
a484 := !a482 & !a450;
a486 := !a484 & !roby_0_0_7;
a488 := !a486 & !a480;
a490 := !a488 & !a478;
a492 := !a490 & !a468;
a494 := !a492 & !a466;
a496 := !a494 & !a460;
a498 := !a496 & !a458;
a500 := a498 & !a444;
a502 := !a500 & a438;
a504 := a326 & a284;
a506 := !prev_movy_1 & !prev_movy_0_0_2;
a508 := !a506 & a504;
a510 := a484 & roby_0_0_7;
a512 := !a510 & !a478;
a514 := !a512 & !a480;
a516 := !a514 & !a466;
a518 := !a516 & !a468;
a520 := !a518 & !a458;
a522 := !a520 & !a460;
a524 := a522 & !a508;
a526 := !a524 & a502;
a528 := a526 & a352;
a530 := prev_glitches_0_0_1 & !glitches_0_0_1;
a532 := !a530 & a528;
a534 := !prev_obsx_2 & !obsx_2;
a536 := prev_obsx_2 & obsx_2;
a538 := !a536 & !a534;
a540 := !a126 & !a120;
a542 := !prev_obsx_0_0_6 & !obsx_0_0_6;
a544 := prev_obsx_0_0_6 & obsx_0_0_6;
a546 := !a544 & !a542;
a548 := !a546 & !a540;
a550 := a548 & !a538;
a552 := !prev_obsy_2 & !obsy_2;
a554 := prev_obsy_2 & obsy_2;
a556 := !a554 & !a552;
a558 := !a156 & !a150;
a560 := !prev_obsy_0_0_6 & !obsy_0_0_6;
a562 := prev_obsy_0_0_6 & obsy_0_0_6;
a564 := !a562 & !a560;
a566 := !a564 & !a558;
a568 := a566 & !a556;
a570 := a568 & a550;
a572 := !a570 & !prev_obsmove;
a574 := !prev_glitches_0_0_1 & glitches_0_0_1;
a576 := !a574 & a572;
a578 := !a576 & a532;
a580 := a578 & !a108;
a582 := !a580 & IsNotFirstRound;
a584 := !a582 & a114;
a586 := a584 & !AssumptionsAlreadyViolated;
a588 := controllable_movy_1 & controllable_movy_0_0_2;
a590 := controllable_movx_1 & controllable_movx_0_0_2;
a592 := !a590 & !controllable_obsmove;
a594 := !a592 & !IsNotFirstRound;
a596 := !a594 & !a588;
a598 := !prev_robx_2 & prev_obsx_2;
a600 := prev_robx_2 & !prev_obsx_2;
a602 := !prev_robx_1 & prev_obsx_1;
a604 := prev_robx_1 & !prev_obsx_1;
a606 := !prev_robx_0_0_7 & prev_obsx_0_0_6;
a608 := a606 & !a604;
a610 := !a608 & !a602;
a612 := !a610 & !a600;
a614 := !a612 & !a598;
a616 := prev_robx_1 & prev_obsx_1;
a618 := !prev_robx_1 & !prev_obsx_1;
a620 := !a618 & !a606;
a622 := !a620 & !a616;
a624 := !prev_obsx_2 & !prev_obsx_1;
a626 := a624 & prev_robx_2;
a628 := !a626 & a622;
a630 := prev_obsx_2 & prev_obsx_1;
a632 := !a624 & !prev_robx_2;
a634 := !a632 & !a630;
a636 := a634 & !a628;
a638 := !a636 & a614;
a640 := !prev_roby_2 & prev_obsy_2;
a642 := prev_roby_2 & !prev_obsy_2;
a644 := !prev_roby_1 & prev_obsy_1;
a646 := prev_roby_1 & !prev_obsy_1;
a648 := !prev_roby_0_0_7 & prev_obsy_0_0_6;
a650 := a648 & !a646;
a652 := !a650 & !a644;
a654 := !a652 & !a642;
a656 := !a654 & !a640;
a658 := a656 & a638;
a660 := prev_roby_1 & prev_obsy_1;
a662 := !prev_roby_1 & !prev_obsy_1;
a664 := !a662 & !a648;
a666 := !a664 & !a660;
a668 := !prev_obsy_2 & !prev_obsy_1;
a670 := a668 & prev_roby_2;
a672 := !a670 & a666;
a674 := prev_obsy_2 & prev_obsy_1;
a676 := !a668 & !prev_roby_2;
a678 := !a676 & !a674;
a680 := a678 & !a672;
a682 := !a680 & a658;
a684 := !a570 & controllable_obsmove;
a686 := !a684 & !a682;
a688 := a570 & !controllable_obsmove;
a690 := !a688 & a686;
a692 := a690 & !a590;
a694 := !a692 & IsNotFirstRound;
a696 := !a694 & a596;
a698 := !a696 & a586;
--outputs
o0 := a698;
DEFINE
    _rt_miss := cmd = cmd_miss & nondet;
    _rt_ready0 := cmd = check_ready0 & (obsx_0_0_6 | obsx_1 | obsx_2) & nondet;
    _rt_ready1 := cmd = check_ready1 & (obsy_0_0_6 | obsy_1) & nondet;
    _rt_ready2 := cmd = check_ready2 & (obsy_0_0_6 | obsx_1) & nondet;
    _rt_sched0 := cmd = cmd_sched & is_ready0 & nondet;
    _rt_sched1 := cmd = cmd_sched & !is_ready0 & is_ready1 & nondet;
    _rt_sched2 := cmd = cmd_sched & !is_ready0 & !is_ready1 & is_ready2 & nondet;
    _rt_idle := cmd = cmd_sched & !is_ready0 & !is_ready1 & !is_ready2;
    _rt_release := cmd = cmd_release & nondet;
    error := err;
INVARSPEC sched.state != sink
