
    MODULE main
    VAR

        active : array 0..3 of boolean;
        carry : array 0..3 of boolean; -- carry[0] is an unconstrained input
        bits : array 1..3 of boolean;
        broadcast : boolean;
	deadline_missed : boolean;
   cmd : {cmd_check, cmd_wakeup0, cmd_sleep0, cmd_wakeup1, cmd_sleep1, cmd_wakeup2, cmd_sleep2, cmd_wakeup3, cmd_sleep3};
ASSIGN
	init(deadline_missed) := FALSE;
	next(deadline_missed) := deadline_missed | _rt_deadline;
	init(broadcast) := FALSE;
	next(broadcast) := case
                !sufficient_actives & next(sufficient_actives) : TRUE;
                TRUE : FALSE;
        esac;
        
	init(active[1]) := FALSE;
	init(bits[1]) := FALSE;
	init(carry[1]) := FALSE;
	next(active[1]) := case
                cmd = cmd_wakeup1 : TRUE;
                cmd = cmd_sleep1 : FALSE;
                TRUE : active[1];
            esac;
            
	next(bits[1]) := case
            bits[1] & active[1] & broadcast & visible_carry0 : FALSE;
            !bits[1] & active[1] & broadcast & visible_carry0 : TRUE;
            bits[1] & active[1] & broadcast & !visible_carry0 : TRUE;
            !bits[1] & active[1] & broadcast & !visible_carry0 : FALSE;
            TRUE : bits[1];
        esac;
        next(carry[1]) := case
            bits[1] & active[1] & broadcast & visible_carry0 : TRUE;
            !bits[1] & active[1] & broadcast & visible_carry0 : FALSE;
            bits[1] & active[1] & broadcast & !visible_carry0 : FALSE;
            !bits[1] & active[1] & broadcast & !visible_carry0 : FALSE;
	bits[2] != next(bits[2]) : FALSE; -- next bit will consume the carry
	TRUE : carry[1];
        esac;
        
	init(active[2]) := FALSE;
	init(bits[2]) := FALSE;
	init(carry[2]) := FALSE;
	next(active[2]) := case
                cmd = cmd_wakeup2 : TRUE;
                cmd = cmd_sleep2 : FALSE;
                TRUE : active[2];
            esac;
            
	next(bits[2]) := case
            bits[2] & active[2] & broadcast & visible_carry1 : FALSE;
            !bits[2] & active[2] & broadcast & visible_carry1 : TRUE;
            bits[2] & active[2] & broadcast & !visible_carry1 : TRUE;
            !bits[2] & active[2] & broadcast & !visible_carry1 : FALSE;
            TRUE : bits[2];
        esac;
        next(carry[2]) := case
            bits[2] & active[2] & broadcast & visible_carry1 : TRUE;
            !bits[2] & active[2] & broadcast & visible_carry1 : FALSE;
            bits[2] & active[2] & broadcast & !visible_carry1 : FALSE;
            !bits[2] & active[2] & broadcast & !visible_carry1 : FALSE;
	bits[3] != next(bits[3]) : FALSE; -- next bit will consume the carry
	TRUE : carry[2];
        esac;
        
	init(active[3]) := FALSE;
	init(bits[3]) := FALSE;
	init(carry[3]) := FALSE;
	next(active[3]) := case
                cmd = cmd_wakeup3 : TRUE;
                cmd = cmd_sleep3 : FALSE;
                TRUE : active[3];
            esac;
            
	next(bits[3]) := case
            bits[3] & active[3] & broadcast & visible_carry2 : FALSE;
            !bits[3] & active[3] & broadcast & visible_carry2 : TRUE;
            bits[3] & active[3] & broadcast & !visible_carry2 : TRUE;
            !bits[3] & active[3] & broadcast & !visible_carry2 : FALSE;
            TRUE : bits[3];
        esac;
        next(carry[3]) := case
            bits[3] & active[3] & broadcast & visible_carry2 : TRUE;
            !bits[3] & active[3] & broadcast & visible_carry2 : FALSE;
            bits[3] & active[3] & broadcast & !visible_carry2 : FALSE;
            !bits[3] & active[3] & broadcast & !visible_carry2 : FALSE;
	TRUE : carry[3];
        esac;
        
DEFINE
	nb_actives := case active[0] : 1; TRUE : 0; esac + case active[1] : 1; TRUE : 0; esac + case active[2] : 1; TRUE : 0; esac + case active[3] : 1; TRUE : 0; esac;
	sufficient_actives := nb_actives >= 3;
visible_carry0 := case
            active[0] : carry[0];
            TRUE : FALSE;
        esac;
visible_carry1 := case
            active[1] : carry[1];
            TRUE : FALSE;
        esac;
visible_carry2 := case
            active[2] : carry[2];
            TRUE : FALSE;
        esac;
visible_carry3 := case
            active[3] : carry[3];
            TRUE : FALSE;
        esac;
	err := visible_carry3 & !deadline_missed;
	_rt_wakeup0 := cmd = cmd_wakeup0;
	_rt_sleep0 := cmd = cmd_sleep0;
	_rt_wakeup1 := cmd = cmd_wakeup1;
	_rt_sleep1 := cmd = cmd_sleep1;
	_rt_wakeup2 := cmd = cmd_wakeup2;
	_rt_sleep2 := cmd = cmd_sleep2;
	_rt_wakeup3 := cmd = cmd_wakeup3;
	_rt_sleep3 := cmd = cmd_sleep3;
	_rt_deadline := cmd = cmd_check;
INVARSPEC !err
